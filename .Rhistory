summarise(
avg_score   = mean(SCORE, na.rm = TRUE),
eval_areas  = sum(NO_OF_AREAS_EVALUATED, na.rm = TRUE),
n_buildings = n()
)
# Merge ward boundaries with aggregated scores
ward_map <- merge(
x = wards,
y = ward_scores,
by.x  = "AREA_S_CD",
by.y  = "WARD",
all.x = TRUE
)
# Create choropleth of average score by ward
map_plot <- tm_shape(ward_map) +
tm_polygons(
col         = "avg_score",
palette     = "YlGnBu", # good for color blind people
title       = "Average Score",
border.alpha = 0.5,
style       = "cont"
) +
tm_layout(
main.title   = "Toronto Borough Quality Gradient Map",
legend.outside = TRUE
)
# Convert apartment points to sf and filter out missing coordinates
apt_sf <- data_raw %>%
filter(!is.na(LONGITUDE) & !is.na(LATITUDE)) %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
point_layer <- tm_shape(apt_sf) +
tm_dots(
col         = "#E69F00",
size        = 0.1,
alpha       = 0.6,
legend.show = FALSE)
final_map <- map_plot + point_layer
final_map
install.packages("remotes")
remotes::install_github("jthomasmock/gtExtras")
library(gt)
library(dplyr)
library(gtExtras)  # 关键：加载gtExtras以使用内嵌条形图
ward_table <- data_raw %>%
group_by(WARD, WARDNAME) %>%
summarise(
avg_score = mean(SCORE, na.rm = TRUE),
high_risk = sum(SCORE < 50, na.rm = TRUE),
avg_units = mean(CONFIRMED_UNITS, na.rm = TRUE),
eval_density = sum(NO_OF_AREAS_EVALUATED) / n(),
.groups = "drop"
)
ward_table %>%
gt() %>%
# 核心条件格式
gt_plt_bar(
column = eval_density,
width = 50,
color = "#1E90FF",
labels = c("低", "高")  # 自定义标签
) %>%
data_color(
columns = avg_score,
palette = c("red", "yellow", "green"),
domain = c(0, 100)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = high_risk, rows = high_risk > 5)  # 高危区域加粗
) %>%
cols_label(
eval_density = "Density）"
)
install.packages("remotes")
library(gt)
library(dplyr)
library(gtExtras)  # 关键：加载gtExtras以使用内嵌条形图
ward_table <- data_raw %>%
group_by(WARD, WARDNAME) %>%
summarise(
avg_score = mean(SCORE, na.rm = TRUE),
high_risk = sum(SCORE < 50, na.rm = TRUE),
avg_units = mean(CONFIRMED_UNITS, na.rm = TRUE),
eval_density = sum(NO_OF_AREAS_EVALUATED) / n(),
.groups = "drop"
)
ward_table %>%
gt() %>%
# 核心条件格式
gt_plt_bar(
column = eval_density,
width = 50,
color = "#1E90FF",
labels = c("低", "高")  # 自定义标签
) %>%
data_color(
columns = avg_score,
palette = c("red", "yellow", "green"),
domain = c(0, 100)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = high_risk, rows = high_risk > 5)  # 高危区域加粗
) %>%
cols_label(
eval_density = "Density）"
)
library(tidyverse)
library(lubridate)
# Data Cleaning:
# Extract EvaluationYear from EVALUATION_COMPLETED_ON (format "2022-06-29") AND
# Compute BuildingAge = EvaluationYear - YEAR_BUILT
data <- data_raw %>%
mutate(EvaluationYear = year(ymd(EVALUATION_COMPLETED_ON)),
BuildingAge = EvaluationYear - YEAR_BUILT)
# Plot the hexbins:
# X axis: BuildingAge (EvaluationYear - YEAR_BUILT)
# Y axis: SCORE (Evaluation score)
# Color: CONFIRMED_UNITS (Number of confirmed units)
ggplot(data, aes(x = BuildingAge, y = SCORE,)) +
stat_binhex(bins = 60,
aes(fill = ..count..),color = NA,alpha = 0.8) +
scale_fill_viridis_c(name = "Unit Count"
) +
labs(title = "Building Age VS Evaluation Score",
subtitle = "Color represents count of points(Number of confirmed units) inside",
x = "Building Age (Years)",
y = "Evaluation Score") +
theme_minimal()
library(tidyverse)
library(sf)
library(tmap)
citation("opendatatoronto")
# Toronto ward boundaries from shapefile(Quote below)
wards <- st_read("25-ward/WARD_WGS84.shp")%>%
mutate(
AREA_S_CD = as.character(as.integer(AREA_S_CD)))
# Aggregate apartment evaluation data by ward
ward_scores <- apt_raw %>%
filter(!is.na(SCORE)) %>%            # Remove records without a score
group_by(WARD) %>%
summarise(
avg_score   = mean(SCORE, na.rm = TRUE),
eval_areas  = sum(NO_OF_AREAS_EVALUATED, na.rm = TRUE),
n_buildings = n()
)
library(tidyverse)
data_raw <- read_csv("Apartment Building Evaluation.csv")
colnames(data_raw)
library(tidyverse)
library(lubridate)
# Data Cleaning:
# Extract EvaluationYear from EVALUATION_COMPLETED_ON (format "2022-06-29") AND
# Compute BuildingAge = EvaluationYear - YEAR_BUILT
data <- data_raw %>%
mutate(EvaluationYear = year(ymd(EVALUATION_COMPLETED_ON)),
BuildingAge = EvaluationYear - YEAR_BUILT)
# Plot the hexbins:
# X axis: BuildingAge (EvaluationYear - YEAR_BUILT)
# Y axis: SCORE (Evaluation score)
# Color: CONFIRMED_UNITS (Number of confirmed units)
ggplot(data, aes(x = BuildingAge, y = SCORE,)) +
stat_binhex(bins = 60,
aes(fill = ..count..),color = NA,alpha = 0.8) +
scale_fill_viridis_c(name = "Unit Count"
) +
labs(title = "Building Age VS Evaluation Score",
subtitle = "Color represents count of points(Number of confirmed units) inside",
x = "Building Age (Years)",
y = "Evaluation Score") +
theme_minimal()
library(tidyverse)
library(sf)
library(tmap)
# Toronto ward boundaries from shapefile(Quote below)
wards <- st_read("25-ward/WARD_WGS84.shp")%>%
mutate(
AREA_S_CD = as.character(as.integer(AREA_S_CD)))
# Aggregate apartment evaluation data by ward
ward_scores <- data_raw %>%
filter(!is.na(SCORE)) %>%            # Remove records without a score
group_by(WARD) %>%
summarise(
avg_score   = mean(SCORE, na.rm = TRUE),
eval_areas  = sum(NO_OF_AREAS_EVALUATED, na.rm = TRUE),
n_buildings = n()
)
# Merge ward boundaries with aggregated scores
ward_map <- merge(
x = wards,
y = ward_scores,
by.x  = "AREA_S_CD",
by.y  = "WARD",
all.x = TRUE
)
# Create choropleth of average score by ward
map_plot <- tm_shape(ward_map) +
tm_polygons(
col         = "avg_score",
palette     = "YlGnBu", # good for color blind people
title       = "Average Score",
border.alpha = 0.5,
style       = "cont"
) +
tm_layout(
main.title   = "Toronto Borough Quality Gradient Map",
legend.outside = TRUE
)
# Convert apartment points to sf,also filter out missing coordinates
apt_sf <- data_raw %>%
filter(!is.na(LONGITUDE) & !is.na(LATITUDE)) %>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)
point_layer <- tm_shape(apt_sf) +
tm_dots(
col         = "#E69F00",
size        = 0.1,
alpha       = 0.6,
legend.show = FALSE)
final_map <- map_plot + point_layer
final_map
# Load necessary libraries
library(tidyverse)    # data manipulation and plotting
library(ggradar)      # radar chart plotting
library(scales)       # for color scales and transparency
library(stringr)      # for text wrapping
# Define the facility metric columns
facilities <- c(
"ENTRANCE_LOBBY", "SECURITY", "ELEVATORS", "STAIRWELLS", "LAUNDRY_ROOMS",
"INTERNAL_GUARDS_HANDRAILS", "GARBAGE_CHUTE_ROOMS", "GARBAGE_BIN_STORAGE_AREA",
"STORAGE_AREAS_LOCKERS", "INTERIOR_WALL_CEILING_FLOOR", "INTERIOR_LIGHTING_LEVELS",
"GRAFFITI", "EXTERIOR_CLADDING", "EXTERIOR_GROUNDS", "EXTERIOR_WALKWAYS",
"BALCONY_GUARDS", "WATER_PEN_EXT_BLDG_ELEMENTS", "PARKING_AREA", "OTHER_FACILITIES"
)
# 1. Transform to long format, group by score category, compute normalized average scores
facility_scores <- data_raw %>%
# Bucket overall SCORE into three groups
mutate(score_group = cut(
SCORE,
breaks = c(0, 50, 70, 100),
labels = c("Low Score(0-50)", "Medium Score(50-70)", "High Score(70-100)")
)) %>%
select(score_group, all_of(facilities)) %>%
pivot_longer(
cols      = -score_group,
names_to  = "facility",
values_to = "score"
) %>%
group_by(score_group, facility) %>%
summarise(
avg_score = mean(score, na.rm = TRUE) / 5,  # normalize to 0–1 scale
.groups   = "drop"
) %>%
# Recode facility names to concise labels
mutate(facility = recode(facility,
"ENTRANCE_LOBBY"             = "Lobby",
"SECURITY"                   = "Security",
"ELEVATORS"                  = "Lifts",
"STAIRWELLS"                 = "Stairs",
"LAUNDRY_ROOMS"              = "Laundry",
"INTERNAL_GUARDS_HANDRAILS"  = "Guards/Rails",
"GARBAGE_CHUTE_ROOMS"        = "Chutes",
"GARBAGE_BIN_STORAGE_AREA"   = "Bins",
"STORAGE_AREAS_LOCKERS"      = "Lockers",
"INTERIOR_WALL_CEILING_FLOOR"= "Surfaces",
"INTERIOR_LIGHTING_LEVELS"   = "Lighting",
"GRAFFITI"                   = "Graffiti",
"EXTERIOR_CLADDING"          = "Cladding",
"EXTERIOR_GROUNDS"           = "Grounds",
"EXTERIOR_WALKWAYS"          = "Walkways",
"BALCONY_GUARDS"             = "Balcony",
"WATER_PEN_EXT_BLDG_ELEMENTS"= "Ext. Elements",
"PARKING_AREA"               = "Parking",
"OTHER_FACILITIES"           = "Other"
))
# 2. Wrap long labels to avoid overlap around the chart
facility_scores <- facility_scores %>%
mutate(facility = str_wrap(facility, width = 12))
# 3. Pivot back to wide format for ggradar
radar_data <- facility_scores %>%
pivot_wider(
names_from  = facility,
values_from = avg_score
)
# 4. Draw a colorblind‐friendly radar chart
ggradar(
radar_data,
# grid and value settings
grid.min             = 0,
grid.mid             = 0.5,
grid.max             = 1,
values.radar         = c("0%", "50%", "100%"),
# label sizes
grid.label.size      = 3,
axis.label.size      = 3,
axis.label.offset    = 1.2,
legend.text.size     = 8,
# line and point styles
group.point.size     = 2,
group.line.width     = 0.7,
# background and mid‐grid line color
background.circle.colour = "white",
gridline.mid.colour     = "grey80",
# colorblind‐safe palette for the three score groups (ColorBrewer Dark2)
group.colours        = c(
"Low Score(0-50)"    = "#1B9E77",
"Medium Score(50-70)" = "#D95F02",
"High Score(70-100)"   = "#7570B3"
),
# legend settings
plot.legend          = TRUE,
legend.position      = "bottom"
) +
# Add and style the chart title
labs(title = "Facility Sub‑Score Comparison by Score Group") +
theme(
plot.title = element_text(
size  = 16,
face  = "bold",
hjust = 0.5,
vjust = 2
)
)
install.packages("remotes")
remotes::install_github("jthomasmock/gtExtras")
library(gt)
library(dplyr)
library(gtExtras)  # 关键：加载gtExtras以使用内嵌条形图
ward_table <- data_raw %>%
group_by(WARD, WARDNAME) %>%
summarise(
avg_score = mean(SCORE, na.rm = TRUE),
high_risk = sum(SCORE < 50, na.rm = TRUE),
avg_units = mean(CONFIRMED_UNITS, na.rm = TRUE),
eval_density = sum(NO_OF_AREAS_EVALUATED) / n(),
.groups = "drop"
)
ward_table %>%
gt() %>%
# 核心条件格式
gt_plt_bar(
column = eval_density,
width = 50,
color = "#1E90FF",
labels = c("低", "高")  # 自定义标签
) %>%
data_color(
columns = avg_score,
palette = c("red", "yellow", "green"),
domain = c(0, 100)
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(columns = high_risk, rows = high_risk > 5)  # 高危区域加粗
) %>%
cols_label(
eval_density = "Density）"
)
install.packages("remotes")
# List of required CRAN packages
cran_packages <- c(
"shiny",
"tidyverse",
"sf",
"leaflet",
"leaflet.extras",
"RColorBrewer",
"viridis",
"gt",
"scales",
"stringr",
"lubridate",
"bslib",
"hexbin"
)
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
install.packages(pkg)
} else {
message(paste("Package already installed:", pkg))
}
}
# List of required CRAN packages
cran_packages <- c(
"shiny",
"tidyverse",
"sf",
"leaflet",
"leaflet.extras",
"RColorBrewer",
"viridis",
"gt",
"scales",
"stringr",
"lubridate",
"bslib",
"hexbin"
)
#CRAN
message("Installing CRAN packages...")
for (pkg in cran_packages) {
install_if_missing(pkg)
}
# Install GitHub packages
message("Installing GitHub packages...")
#remotes
install_if_missing("remotes")
#ggradar
if (!requireNamespace("ggradar", quietly = TRUE)) {
message("Installing ggradar from GitHub...")
remotes::install_github("ricardo-bion/ggradar")
} else {
message("Package already installed: ggradar")
}
#gtExtras
if (!requireNamespace("gtExtras", quietly = TRUE)) {
message("Installing gtExtras from GitHub...")
remotes::install_github("jthomasmock/gtExtras")
} else {
message("Package already installed: gtExtras")
}
message("All dependencies installed. You can now run the Shiny app.")
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
install.packages(pkg)
} else {
message(paste("Package already installed:", pkg))
}
}
# packages
c_packages <- c(
"shiny",
"tidyverse",
"sf",
"leaflet",
"leaflet.extras",
"RColorBrewer",
"viridis",
"gt",
"scales",
"stringr",
"lubridate",
"bslib",
"hexbin"
)
#CRAN
for (pkg in c_packages) {
install_if_missing(pkg)
}
#remotes
install_if_missing("remotes")
#ggradar
if (!requireNamespace("ggradar", quietly = TRUE)) {
remotes::install_github("ricardo-bion/ggradar")
} else {
message("already installed: ggradar")
}
#gtExtras
if (!requireNamespace("gtExtras", quietly = TRUE)) {
remotes::install_github("jthomasmock/gtExtras")
} else {
message("already installed: gtExtras")
}
# packages
c_packages <- c(
"shiny",
"tidyverse",
"sf",
"leaflet",
"leaflet.extras",
"RColorBrewer",
"viridis",
"gt",
"scales",
"stringr",
"lubridate",
"bslib",
"hexbin"
"DT"
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message(paste("Installing package:", pkg))
install.packages(pkg)
} else {
message(paste("Package already installed:", pkg))
}
}
# packages
c_packages <- c(
"shiny",
"tidyverse",
"sf",
"leaflet",
"leaflet.extras",
"RColorBrewer",
"viridis",
"gt",
"scales",
"stringr",
"lubridate",
"bslib",
"hexbin",
"DT"
)
#CRAN
for (pkg in c_packages) {
install_if_missing(pkg)
}
shiny::runApp('Downloads/Stat2442project_final')
runApp('Downloads/Stat2442project_final')
runApp('Downloads/Stat2442project_final/app-copy.R')
